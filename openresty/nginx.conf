worker_processes auto;
daemon off;

events {
    worker_connections  1024;
}

http {
    include /usr/local/openresty/nginx/conf/mime.types;

    lua_package_path "./libinjection/?.lua;;";
	lua_package_cpath "./libinjection/?.so;;";
    default_type application/octet-stream;
    types_hash_max_size 4096;
    log_format  main    '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';
    sendfile on;
    keepalive_timeout 300s;
    gzip on;
    gzip_types application/javascript text/css;
    server_tokens off;

    server {
        listen 80;
        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl http2 default_server;
        # server_name manager;

        ssl_certificate ca/server.crt;
        ssl_certificate_key ca/server.key;

        # https://mozilla.github.io/server-side-tls/ssl-config-generator/
        ssl_protocols TLSv1.3 TLSv1.2;
        ssl_ciphers 'TLS13-AES-256-GCM-SHA384:TLS13-CHACHA20-POLY1305-SHA256:TLS13-AES-128-GCM-SHA256:TLS13-AES-128-CCM-8-SHA256:TLS13-AES-128-CCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:SSL:10m;


        client_max_body_size 0;
        client_body_buffer_size 20m;

        location /api/ {
            access_by_lua_file lua/attack_defend.lua;
            proxy_http_version 1.1;
            proxy_read_timeout 300s;
            proxy_pass http://server:8000;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location / {
            root /web/nginx/dist;
            try_files $uri /$uri /index.html;
        }

        location /style_image {
            alias /dev/resources/style_image;
        }

        location /original_image {
            alias /dev/resources/original_image;
        }

        location /generate_image {
            alias /dev/resources/generate_image;
        }

        location /other_image {
            alias /dev/resources/other_image;
        }

        location = /attack_defend {
            internal;
            content_by_lua_block {
                json = require "cjson"
                ngx.header["Content-Type"] = "application/json; charset=utf-8"
                local resp = '{"err":"Detected attack activity","data":{"explain":"If you have any questions, please contact us", "email":"chshbox@gmail.com"}}'
                ngx.say(json.encode(resp))
            }
        }
    }
}